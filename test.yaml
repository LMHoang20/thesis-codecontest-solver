
---
analysis: |
    The code solution is not clean. It has several redundant code blocks and uses a lot of nested if-else statements. The code solution could be more readable by extracting the logic into smaller functions.
    The code solution uses `string(n, 'c')` to create a string of length `n` filled with character `c`. This is a good practice, but the code solution could be more readable by using a separate function to create the string.
    The code solution uses `cout << endl;` to print a newline character at the end of the output. This is not necessary, as the default behavior of `cout` is to print a newline character at the end of the output.
follows_instructions: true
is_clean: false
refactored_code: |
    #include <iostream>
    #include <string>
    using namespace std;
    
    string create_string(char c, int n) {
        return string(n, c);
    }
    
    string generate_string(int a, int b, int x) {
        string result;
        if (x % 2 == 0) {
            if (a > b) {
                result += create_string("01", x / 2);
                result += create_string('1', b - x / 2);
                result += create_string('0', a - x / 2);
            } else {
                result += create_string("10", x / 2);
                result += create_string('0', a - x / 2);
                result += create_string('1', b - x / 2);
            }
        } else {
            if (a > b) {
                result += create_string("01", x / 2);
                result += create_string('0', a - x / 2);
                result += create_string('1', b - x / 2);
            } else {
                result += create_string("10", x / 2);
                result += create_string('1', b - x / 2);
                result += create_string('0', a - x / 2);
            }
        }
        return result;
    }
    
    int main() {
        int a, b, x;
        cin >> a >> b >> x;
        cout << generate_string(a, b, x) << endl;
        return 0;
    }
```